const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');
var Promise = require('bluebird');


var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

// Use the unique id generated by getNextUniqueId to create a 
// file path inside the dataDir. Each time a POST request is
//  made to the collection route, save a file with the todo
//   item in this folder. Only save the todo text in the file,
//    the id of the todo item is encoded into its filename -- 
//    DO NOT STORE AN OBJECT.
exports.create = (text, callback) => {
  counter.getNextUniqueId((err, id) => {
    //create file path inside dataDir
    //id is file name
    if (err) {
      //console.log('INSIDE GETNEXTUNIQUEID ERROR')
      callback('Error getNextUniq', id);
    } else {
      // console.log('create id: ', id);
      var filePath = path.join(exports.dataDir, id + '.txt');
      //console.log(filePath);
      fs.writeFile(filePath, text, (err) => {
        if (err) {ss
          callback('error on create file', id);
        } else {
          callback(null, { id, text });
        }
      });
    }
  });


};


exports.readAll = (callback) => {

  // var data = _.map(items, (text, id) => {
  //   return { id, text };
  // });



  //read each file on the dataDir
  fs.readdir(exports.dataDir, function (err, files) {
    //handling error
    if (err) {
      //console.log('Unable to scan directory: ' + err);
      callback('Error', []);
    } else {
  
        
      
      var readFileAsync = function (filePath) {
        console.log(filePath);
        return new Promise(function (resolve, reject) {
          fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
              reject(err);
            } else {
              var fileName = path.basename(filePath, '.txt');
             
              var tuple = {id: fileName, text: data};
             console.log(tuple);
       
              resolve(tuple);
            }
          });
        });
      }

      var promises = [];
      files.forEach(function (file) {
      var filePath = exports.dataDir+'/'+file;
      promises.push(readFileAsync(filePath));

    
    });

      
      Promise.all(promises).then(function (promisesData) {
      
       console.log('Data from promiseALl:' +promisesData);
       callback(null, promisesData);
       });
       
    


    }
 
  });
        


  

  
  // callback(null, data);
};

exports.readOne = (id, callback) => {


  fs.readFile(exports.dataDir + '/' + id + '.txt', (err, text) => {
    if (err) {
      //callback('error on create file', id);
      callback(new Error(`No item with id: ${id}`));
    } else {
      callback(null, {id, text: text.toString() });
      
      
    }
  });



};

exports.update = (id, text, callback) => {

 
  
  exports.readOne(id, (err, data) =>{
    if (err) {
      callback(new Error(`No item with id: ${id}`));
    } else {
      fs.writeFile(exports.dataDir + '/' + id + '.txt', text, (err) => {
        if (err) {
          callback(new Error(`No item with id: ${id}`));
        } else {
          callback(null, { id, text });
        }
      });

    }

  });
 

  


};

exports.delete = (id, callback) => {


  var filePath = exports.dataDir + '/' + id + '.txt';
  fs.unlink(filePath, (err, data) => {
    if (err) {
      callback(err, null);
    } else {
      callback(null, data);
    }
  });

};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
